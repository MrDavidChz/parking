#!/usr/bin/node

var AWS = require('aws-sdk');
var async = require('async');
const ALPR = 'alpr';

var program = require('commander');
program.option('-g, --garage [garage_id]', 'Garage ID')
       .option('-u, --url [URL]', 'long URL')
       .parse(process.argv);
var garageId = program.garage;
var longUrl = program.url + garageId;
console.log('longUrl: ' + longUrl);

var shortener = require('./url_shortener.js');
var shortUrl = '';

AWS.config.update({region: 'ap-northeast-1'});
var iot = new AWS.Iot();
var iotdata;

async.waterfall([
  function(callback) {
    shortener.shortUrl(longUrl, function(url) {
      shortUrl = url;
      console.log('shortUrl: ' + shortUrl);
      callback();
    });
  },
  function(callback) {
    iot.describeEndpoint({}, function(err, data) {
      console.log('endpoint: ' + data.endpointAddress);
      callback(err, data.endpointAddress);
    });
  },
  function(endpoint, callback) {
    var params = {
      attributeName: 'garage_id',
      attributeValue: garageId
    }
    iot.listThings(params, function(err, data) {
      //console.log(data.things);
      callback(err, endpoint, data.things);
    });
  },
  function(endpoint, things, callback) {
    iotdata = new AWS.IotData({endpoint: endpoint});
    var payload = JSON.stringify({
      state: {
        desired: {
          url: shortUrl
        }
      }
    });
    things.forEach(function(thing, index, array) {
      var attributes = thing.attributes;
      if (attributes.type == ALPR && attributes.garage_id == garageId) {
        var params = { 
          thingName: thing.thingName,
          payload: payload
        }
        iotdata.updateThingShadow(params, function(err, data) {
          if (err) throw err;
        });
        console.log(thing);
      }
    });
  }
]);
